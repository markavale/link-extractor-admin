{"remainingRequest":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/src/views/table/ReportInstance.vue?vue&type=template&id=113bdc84&","dependencies":[{"path":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/src/views/table/ReportInstance.vue","mtime":1617180349265},{"path":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}