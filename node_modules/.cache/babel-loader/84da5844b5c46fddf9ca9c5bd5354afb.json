{"remainingRequest":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/babel-loader/lib/index.js!/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/src/api/axiosConfig.js","dependencies":[{"path":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/src/api/axiosConfig.js","mtime":1616748765896},{"path":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IENvb2tpZXMgZnJvbSAnanMtY29va2llJzsgLy8gaW1wb3J0IHsgc3RhdGUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvdXNlcicKLy8gY29uc3QgQVBJVXJsUHJvZHVjdGlvbiA9ICdodHRwczovL2FkbWluLXNjcmFwZXIuaGVyb2t1YXBwLmNvbS8nCgp2YXIgQVBJVXJsRGV2ZWxvcG1lbnQgPSAnaHR0cDovLzEyNy4wLjAuMTo4MDAwLyc7CnZhciBBUElVcmwgPSBBUElVcmxEZXZlbG9wbWVudDsgLy8gYXhpb3MuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpOwovLyBheGlvcy5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7Ci8vIE1ha2UgQXhpb3MgcGxheSBuaWNlIHdpdGggRGphbmdvIENTUkYKLy8gYXhpb3MuZGVmYXVsdHMueHNyZkNvb2tpZU5hbWUgPSAnY3NyZnRva2VuJwovLyBheGlvcy5kZWZhdWx0cy54c3JmSGVhZGVyTmFtZSA9ICdYLUNTUkZUb2tlbicKCnZhciBheGlvc0Jhc2UgPSBheGlvcy5jcmVhdGUoewogIGJhc2VVUkw6IEFQSVVybCwKICBoZWFkZXJzOiB7CiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgJ1gtQ1NSRlRva2VuJzogQ29va2llcy5nZXQoJ2NzcmZ0b2tlbicpCiAgfQp9KTsKdmFyIGdldEFQSSA9IGF4aW9zLmNyZWF0ZSh7CiAgYmFzZVVSTDogQVBJVXJsCn0pOyAvLyBnZXRBUEkuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZSh1bmRlZmluZWQsIGZ1bmN0aW9uIChlcnIpIHsKLy8gICAvLyBpZiBlcnJvciByZXNwb25zZSBzdGF0dXMgaXMgNDAxLCBpdCBtZWFucyB0aGUgcmVxdWVzdCB3YXMgaW52YWxpZCBkdWUgdG8gZXhwaXJlZCBhY2Nlc3MgdG9rZW4KLy8gICBpZiAoZXJyLmNvbmZpZyAmJiBlcnIucmVzcG9uc2UgJiYgZXJyLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7Ci8vICAgICBzdG9yZS5kaXNwYXRjaCgncmVmcmVzaFRva2VuJykgLy8gYXR0ZW1wdCB0byBvYnRhaW4gbmV3IGFjY2VzcyB0b2tlbiBieSBydW5uaW5nICdyZWZyZXNoVG9rZW4nIGFjdGlvbgovLyAgICAgICAudGhlbihhY2Nlc3MgPT4gewovLyAgICAgICAgIC8vIGlmIHN1Y2Nlc3NmdWwgcmUtc2VuZCB0aGUgcmVxdWVzdCB0byBnZXQgdGhlIGRhdGEgZnJvbSBzZXJ2ZXIKLy8gICAgICAgICBheGlvcy5yZXF1ZXN0KHsKLy8gICAgICAgICAgIGJhc2VVUkw6IEFQSVVybCwKLy8gICAgICAgICAgIG1ldGhvZDogJ2dldCcsCi8vICAgICAgICAgICBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthY2Nlc3N9YCB9LCAvLyB0aGUgbmV3IGFjY2VzcyB0b2tlbiBpcyBhdHRhY2hlZCB0byB0aGUgYXV0aG9yaXphdGlvbiBoZWFkZXIKLy8gICAgICAgICAgIHVybDogJy9tb2RzLycKLy8gICAgICAgICB9KS50aGVuKHJlc3BvbnNlID0+IHsKLy8gICAgICAgICAgIC8vIGlmIHN1Y2Nlc3NmdWxseSByZWNlaXZlZCB0aGUgZGF0YSBzdG9yZSBpdCBpbiBzdG9yZS5zdGF0ZS5BUElEYXRhIHNvIHRoYXQgJ0Rvd25sb2FkcycgY29tcG9uZW50IGNhbiBncmFiIHRoZQovLyAgICAgICAgICAgLy8gZGF0YSBmcm9tIGl0IGFuZCBkaXNwbGF5IHRvIHRoZSBjbGllbnQuCi8vICAgICAgICAgICBjb25zb2xlLmxvZygnU3VjY2VzcyBnZXR0aW5nIHRoZSBNb2RzJykKLy8gICAgICAgICAgIHN0b3JlLnN0YXRlLkFQSURhdGEgPSByZXNwb25zZS5kYXRhCi8vICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHsKLy8gICAgICAgICAgIGNvbnNvbGUubG9nKCdHb3QgdGhlIG5ldyBhY2Nlc3MgdG9rZW4gYnV0IGVycm9yIHdoaWxlIHRyeWluZyB0byBmZXRjaCBkYXRhIGZyb20gdGhlIEFQSSB1c2luZyBpdCcpCi8vICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKQovLyAgICAgICAgIH0pCi8vICAgICAgIH0pCi8vICAgICAgIC5jYXRjaChlcnIgPT4gewovLyAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpCi8vICAgICAgIH0pCi8vICAgfQovLyB9KQovLyBleHBvcnQgeyBheGlvc0Jhc2UsIGdldEFQSSB9CgpleHBvcnQgeyBheGlvc0Jhc2UsIGdldEFQSSB9Ow=="},{"version":3,"sources":["/home/markanthonyvale/dev/news-extractor-admin/frontend/admin/src/api/axiosConfig.js"],"names":["axios","Cookies","APIUrlDevelopment","APIUrl","axiosBase","create","baseURL","headers","get","getAPI"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CACA;AACA;;AACA,IAAMC,iBAAiB,GAAG,wBAA1B;AACA,IAAMC,MAAM,GAAGD,iBAAf,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,IAAME,SAAS,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEH,MADkB;AAE3BI,EAAAA,OAAO,EAAE;AACL,oBAAgB,kBADX;AAEL,mBAAeN,OAAO,CAACO,GAAR,CAAY,WAAZ;AAFV;AAFkB,CAAb,CAAlB;AAOA,IAAMC,MAAM,GAAGT,KAAK,CAACK,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAEH;AADe,CAAb,CAAf,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASC,SAAT,EAAoBK,MAApB","sourcesContent":["import axios from 'axios'\nimport Cookies from 'js-cookie'\n// import { state } from '@/store/modules/user'\n// const APIUrlProduction = 'https://admin-scraper.herokuapp.com/'\nconst APIUrlDevelopment = 'http://127.0.0.1:8000/'\nconst APIUrl = APIUrlDevelopment\n\n// axios.defaults.headers.common['Authorization'] = localStorage.getItem('token');\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n// Make Axios play nice with Django CSRF\n// axios.defaults.xsrfCookieName = 'csrftoken'\n// axios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nconst axiosBase = axios.create({\n    baseURL: APIUrl,\n    headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': Cookies.get('csrftoken')\n    }\n})\nconst getAPI = axios.create({\n    baseURL: APIUrl\n})\n\n\n\n// getAPI.interceptors.response.use(undefined, function (err) {\n//   // if error response status is 401, it means the request was invalid due to expired access token\n//   if (err.config && err.response && err.response.status === 401) {\n//     store.dispatch('refreshToken') // attempt to obtain new access token by running 'refreshToken' action\n//       .then(access => {\n//         // if successful re-send the request to get the data from server\n//         axios.request({\n//           baseURL: APIUrl,\n//           method: 'get',\n//           headers: { Authorization: `Bearer ${access}` }, // the new access token is attached to the authorization header\n//           url: '/mods/'\n//         }).then(response => {\n//           // if successfully received the data store it in store.state.APIData so that 'Downloads' component can grab the\n//           // data from it and display to the client.\n//           console.log('Success getting the Mods')\n//           store.state.APIData = response.data\n//         }).catch(err => {\n//           console.log('Got the new access token but error while trying to fetch data from the API using it')\n//           return Promise.reject(err)\n//         })\n//       })\n//       .catch(err => {\n//         return Promise.reject(err)\n//       })\n//   }\n// })\n\n// export { axiosBase, getAPI }\nexport { axiosBase, getAPI }"]}]}